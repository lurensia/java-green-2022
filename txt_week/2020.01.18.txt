public - 모든 패키지에서 공개 가능=가져다 쓸 수 있다.
import(가져오다.) = import 00.00(하나 가져오기) or 00.*(폴더 전부를 가져온다.)
어지간하면 public은 사용할 것

default - 아무것도 붙지 않으면 디폴트 값이되어 같은 패키지 내부엣만 찾을 수 있다.

private - 같은 클래스 내부에서만 찾을 수 있다.
 package ex11.p2;



커피머신을 빗대서 개발자 스태이틱이 하나만 만드는 이유.
1. 커피머신을 스태이틱으로 하면 new로 계속해서 만드는 것으로 가비지 컬렉션이 늘어날 뿐 편하지만 수십만회 지속되면 비용이 늘어난다. 즉, 비효율적이다.

2.그래서 커피머신을 2개를 만들고?(스택에 만드나?) 그 2개가 공유해서 사용한다.

3. 개발자는 개념을 모르거나, 편해서 사용하지만 서비스하기엔 지랄이다.


//오브젝트<부모한테만 걸린다.>

스태이틱= 하나만 두고 사용
힙 = 여러개를 두고 공유가능

상태는 private
행위는 public

상태는 private
행위 getter,setter 만들기


싱글톤//신입이 절대 new를 사용할 수 없다.
생성자에 private를 박아 new를 금지시키고
static으로 메모리에 하나만 올려서 사용하는 기법.

====================================================================================================================================================================================================================================================================================================================
!!인터페이스!!
1.프로토콜 = 수평적 약속 / 인터페이스 = 수직적 약속

2. 추상화가 거대해진다면 효율적, 그 외는 딱히.
3. 모든 추상화할 수 없는 오브젝트들의 공통 행위를 <강제>한다.
4. 행위를 오버라이드 할 수 있어야한다.
5. 인터페이스와 추상화는 개념이 틀리다.
추상클래스 - 추상화시키기 위해서 사용한다.

6.class가 해야하는 일을 지정, 강제하는 것.


============================
자바 고급
나중에...;;

객체지향
상태는 행위를 통해 변경
구체적이 아닌 추상적에 의존
단일책임의 원칙-하나의 개체는 하나의 책임을 지닌다.


